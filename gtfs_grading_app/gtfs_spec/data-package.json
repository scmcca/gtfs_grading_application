{
  "name": "GTFS-Frictionless",
  "resources": [
    {
      "name": "agency.txt",
      "path": "./agency.txt",
      "schema": {
        "fields": [
          {
            "name": "agency_id",
            "type": "string",
            "description": "Identifies a transit brand which is often synonymous with a transit agency. Note that in some cases, such as when a single agency operates multiple separate services, agencies and brands are distinct. This document uses the term \"agency\" in place of \"brand\". A dataset may contain data from multiple agencies. This field is required when the dataset contains data for multiple transit agencies, otherwise it is optional.",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "ID"
          },
          {
            "name": "agency_name",
            "type": "string",
            "description": "Full name of the transit agency.",
            "gtfs_required": "Required",
            "gtfs_type": "Text",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "agency_url",
            "type": "string",
            "format": "uri",
            "description": "URL of the transit agency.",
            "gtfs_required": "Required",
            "gtfs_type": "URL",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "agency_timezone",
            "type": "string",
            "description": "Timezone where the transit agency is located. If multiple agencies are specified in the dataset, each must have the same `agency_timezone`.",
            "gtfs_required": "Required",
            "gtfs_type": "Timezone",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "agency_lang",
            "type": "string",
            "description": "Primary language used by this transit agency. This field helps GTFS consumers choose capitalization rules and other language-specific settings for the dataset.",
            "gtfs_required": "Optional",
            "gtfs_type": "Language code"
          },
          {
            "name": "agency_phone",
            "type": "string",
            "description": "A voice telephone number for the specified agency. This field is a string value that presents the telephone number as typical for the agency's service area. It can and should contain punctuation marks to group the digits of the number. Dialable text (for example, TriMet's \"503-238-RIDE\") is permitted, but the field must not contain any other descriptive text.",
            "gtfs_required": "Optional",
            "gtfs_type": "Phone number"
          },
          {
            "name": "agency_fare_url",
            "type": "string",
            "format": "uri",
            "description": "URL of a web page that allows a rider to purchase tickets or other fare instruments for that agency online.",
            "gtfs_required": "Optional",
            "gtfs_type": "URL"
          },
          {
            "name": "agency_email",
            "type": "string",
            "format": "email",
            "description": "Email address actively monitored by the agency’s customer service department. This email address should be a direct contact point where transit riders can reach a customer service representative at the agency.",
            "gtfs_required": "Optional",
            "gtfs_type": "Email"
          }
        ],
        "primaryKey": "agency_id"
      }
    },
    {
      "name": "attributions.txt",
      "path": "./attributions.txt",
      "schema": {
        "fields": [
          {
            "name": "attribution_id",
            "type": "string",
            "description": "Identifies an attribution for the dataset or a subset of it. This is mostly useful for translations.",
            "gtfs_required": "Optional",
            "gtfs_type": "ID"
          },
          {
            "name": "agency_id",
            "type": "",
            "description": "Agency to which the attribution applies.<br><br>If one `agency_id`, `route_id`, or `trip_id` attribution is defined, the other ones must be empty. If none of them is specified, the attribution will apply to the whole dataset.",
            "gtfs_required": "Optional",
            "gtfs_type": "ID referencing `agency.agency_id`"
          },
          {
            "name": "route_id",
            "type": "",
            "description": "Functions in the same way as `agency_id` except the attribution applies to a route. Multiple attributions can apply to the same route.",
            "gtfs_required": "Optional",
            "gtfs_type": "ID referencing `routes.route_id`"
          },
          {
            "name": "trip_id",
            "type": "",
            "description": "Functions in the same way as `agency_id` except the attribution applies to a trip. Multiple attributions can apply to the same trip.",
            "gtfs_required": "Optional",
            "gtfs_type": "ID referencing `trips.trip_id`"
          },
          {
            "name": "organization_name",
            "type": "string",
            "description": "Name of the organization that the dataset is attributed to.",
            "gtfs_required": "Required",
            "gtfs_type": "Text",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "is_producer",
            "type": "integer",
            "description": "The role of the organization is producer. Valid options are:<br><br>`0` or empty - Organization doesn’t have this role.<br>`1` - Organization does have this role.<br><br>At least one of the fields `is_producer`, `is_operator`, or `is_authority` should be set at `1`.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "is_operator",
            "type": "integer",
            "description": "Functions in the same way as `is_producer` except the role of the organization is operator.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum"
          },
          {
            "name": "is_authority",
            "type": "integer",
            "description": "Functions in the same way as `is_producer` except the role of the organization is authority.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum"
          },
          {
            "name": "attribution_url",
            "type": "string",
            "format": "uri",
            "description": "URL of the organization.",
            "gtfs_required": "Optional",
            "gtfs_type": "URL"
          },
          {
            "name": "attribution_email",
            "type": "string",
            "format": "email",
            "description": "Email of the organization.",
            "gtfs_required": "Optional",
            "gtfs_type": "Email"
          },
          {
            "name": "attribution_phone",
            "type": "string",
            "description": "Phone number of the organization.",
            "gtfs_required": "Optional",
            "gtfs_type": "Phone number"
          }
        ],
        "primaryKey": "attribution_id",
        "foreignKeys": [
          {
            "fields": [
              "agency_id"
            ],
            "reference": {
              "resource": "agency.txt",
              "fields": [
                "agency_id"
              ]
            }
          },
          {
            "fields": [
              "route_id"
            ],
            "reference": {
              "resource": "routes.txt",
              "fields": [
                "route_id"
              ]
            }
          },
          {
            "fields": [
              "trip_id"
            ],
            "reference": {
              "resource": "trips.txt",
              "fields": "trip_id"
            }
          }
        ]
      }
    },
    {
      "name": "calendar.txt",
      "path": "./calendar.txt",
      "schema": {
        "fields": [
          {
            "name": "service_id",
            "type": "string",
            "description": "Uniquely identifies a set of dates when service is available for one or more routes. Each `service_id` value can appear at most once in a [calendar.txt](#calendartxt) file.",
            "gtfs_required": "Required",
            "gtfs_type": "ID",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "monday",
            "type": "integer",
            "description": "Indicates whether the service operates on all Mondays in the date range specified by the `start_date` and `end_date` fields. Note that exceptions for particular dates may be listed in [calendar_dates.txt](#calendar_datestxt). Valid options are:<br><br>`1` - Service is available for all Mondays in the date range.<br>`0` - Service is not available for Mondays in the date range.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "tuesday",
            "type": "integer",
            "description": "Functions in the same way as `monday` except applies to Tuesdays",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "wednesday",
            "type": "integer",
            "description": "Functions in the same way as `monday` except applies to Wednesdays",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "thursday",
            "type": "integer",
            "description": "Functions in the same way as `monday` except applies to Thursdays",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "friday",
            "type": "integer",
            "description": "Functions in the same way as `monday` except applies to Fridays",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "saturday",
            "type": "integer",
            "description": "Functions in the same way as `monday` except applies to Saturdays.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "sunday",
            "type": "integer",
            "description": "Functions in the same way as `monday` except applies to Sundays.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "start_date",
            "type": "date",
            "format": "%Y%m%d",
            "description": "Start service day for the service interval.",
            "gtfs_required": "Required",
            "gtfs_type": "Date",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "end_date",
            "type": "date",
            "format": "%Y%m%d",
            "description": "End service day for the service interval. This service day is included in the interval.",
            "gtfs_required": "Required",
            "gtfs_type": "Date",
            "constraints": {
              "required": "true"
            }
          }
        ],
        "primaryKey": "service_id"
      }
    },
    {
      "name": "calendar_dates.txt",
      "path": "./calendar_dates.txt",
      "schema": {
        "fields": [
          {
            "name": "service_id",
            "type": "",
            "description": "Identifies a set of dates when a service exception occurs for one or more routes. Each (`service_id`, `date`) pair can only appear once in [calendar_dates.txt](#calendar_datestxt) if using [calendar.txt](#calendartxt) and [calendar_dates.txt](#calendar_datestxt) in conjunction. If a `service_id` value appears in both [calendar.txt](#calendartxt) and [calendar_dates.txt](#calendar_datestxt), the information in [calendar_dates.txt](#calendardatestxt) modifies the service information specified in [calendar.txt](#calendartxt).",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `calendar.service_id` or ID",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "date",
            "type": "date",
            "format": "%Y%m%d",
            "description": "Date when service exception occurs.",
            "gtfs_required": "Required",
            "gtfs_type": "Date",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "exception_type",
            "type": "integer",
            "description": "Indicates whether service is available on the date specified in the date field. Valid options are:<br><br> `1` - Service has been added for the specified date.<br>`2` - Service has been removed for the specified date.<hr>*Example: Suppose a route has one set of trips available on holidays and another set of trips available on all other days. One `service_id` could correspond to the regular service schedule and another `service_id` could correspond to the holiday schedule. For a particular holiday, the [calendar_dates.txt](#calendar_datestxt) file could be used to add the holiday to the holiday `service_id` and to remove the holiday from the regular `service_id` schedule.*",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                1,
                2
              ]
            }
          }
        ],
        "primaryKey": [
          "service_id",
          "date"
        ],
        "foreignKeys": [
          {
            "fields": [
              "service_id"
            ],
            "reference": {
              "resource": "calendar.txt",
              "fields": "service_id"
            }
          }
        ]
      }
    },
    {
      "name": "fare_attributes.txt",
      "path": "./fare_attributes.txt",
      "schema": {
        "fields": [
          {
            "name": "fare_id",
            "type": "string",
            "description": "Identifies a fare class.",
            "gtfs_required": "Required",
            "gtfs_type": "ID",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "price",
            "type": "number",
            "description": "Fare price, in the unit specified by `currency_type`.",
            "gtfs_required": "Required",
            "gtfs_type": "Non-negative float",
            "constraints": {
              "required": "true",
              "minimum": 0.0
            }
          },
          {
            "name": "currency_type",
            "type": "string",
            "description": "Currency used to pay the fare.",
            "gtfs_required": "Required",
            "gtfs_type": "Currency code",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "payment_method",
            "type": "integer",
            "description": "Indicates when the fare must be paid. Valid options are:<br><br>`0` - Fare is paid on board.<br>`1` - Fare must be paid before boarding.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "transfers",
            "type": "integer",
            "description": "Indicates the number of transfers permitted on this fare. The fact that this field can be left empty is an exception to the requirement that a Required field must not be empty. Valid options are:<br><br>`0` - No transfers permitted on this fare.<br>`1` - Riders may transfer once.<br>`2` - Riders may transfer twice.<br>empty - Unlimited transfers are permitted.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                1,
                2
              ]
            }
          },
          {
            "name": "agency_id",
            "type": "",
            "description": "Identifies the relevant agency for a fare. This field is required for datasets with multiple agencies defined in [agency.txt](#agencytxt), otherwise it is optional.",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "ID referencing `agency.agency_id`"
          },
          {
            "name": "transfer_duration",
            "type": "interger",
            "description": "Length of time in seconds before a transfer expires. When `transfers`=`0` this field can be used to indicate how long a ticket is valid for or it can be left empty.",
            "gtfs_required": "Optional",
            "gtfs_type": "Non-negative integer",
            "constraints": {
              "minimum": 0.0
            }
          }
        ]
      }
    },
    {
      "name": "fare_rules.txt",
      "path": "./fare_rules.txt",
      "schema": {
        "fields": [
          {
            "name": "fare_id",
            "type": "",
            "description": "Identifies a fare class.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `fare_attributes.fare_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "route_id",
            "type": "",
            "description": "Identifies a route associated with the fare class. If several routes with the same fare attributes exist, create a record in [fare_rules.txt](#fare_rules.txt) for each route.<hr>*Example: If fare class \"b\" is valid on route \"TSW\" and \"TSE\", the [fare_rules.txt](#fare_rules.txt) file would contain these records for the fare class:* <br> ` fare_id,route_id`<br>`b,TSW` <br> `b,TSE`",
            "gtfs_required": "Optional",
            "gtfs_type": "ID referencing `routes.route_id`"
          },
          {
            "name": "origin_id",
            "type": "",
            "description": "Identifies an origin zone. If a fare class has multiple origin zones, create a record in [fare_rules.txt](#fare_rules.txt) for each `origin_id`.<hr>*Example: If fare class \"b\" is valid for all travel originating from either zone \"2\" or zone \"8\", the [fare_rules.txt](#fare_rules.txt) file would contain these records for the fare class:* <br> `fare_id,...,origin_id` <br> `b,...,2`  <br> `b,...,8`",
            "gtfs_required": "Optional",
            "gtfs_type": "ID referencing `stops.zone_id`"
          },
          {
            "name": "destination_id",
            "type": "",
            "description": "Identifies a destination zone. If a fare class has multiple destination zones, create a record in [fare_rules.txt](#fare_rules.txt) for each `destination_id`.<hr>*Example: The `origin_id` and `destination_id` fields could be used together to specify that fare class \"b\" is valid for travel between zones 3 and 4, and for travel between zones 3 and 5, the [fare_rules.txt](#fare_rules.txt) file would contain these records for the fare class:* <br>`fare_id,...,origin_id,destination_id` <br>`b,...,3,4`<br> `b,...,3,5`",
            "gtfs_required": "Optional",
            "gtfs_type": "ID referencing `stops.zone_id`"
          },
          {
            "name": "contains_id",
            "type": "",
            "description": "Identifies the zones that a rider will enter while using a given fare class. Used in some systems to calculate correct fare class. <hr>*Example: If fare class \"c\" is associated with all travel on the GRT route that passes through zones 5, 6, and 7 the [fare_rules.txt](#fare_rules.txt) would contain these records:* <br> `fare_id,route_id,...,contains_id` <br>  `c,GRT,...,5` <br>`c,GRT,...,6` <br>`c,GRT,...,7` <br> *Because all `contains_id` zones must be matched for the fare to apply, an itinerary that passes through zones 5 and 6 but not zone 7 would not have fare class \"c\". For more detail, see [https://code.google.com/p/googletransitdatafeed/wiki/FareExamples](https://code.google.com/p/googletransitdatafeed/wiki/FareExamples) in the GoogleTransitDataFeed project wiki.*",
            "gtfs_required": "Optional",
            "gtfs_type": "ID referencing `stops.zone_id`"
          }
        ]
      }
    },
    {
      "name": "feed_info.txt",
      "path": "./feed_info.txt",
      "schema": {
        "fields": [
          {
            "name": "feed_publisher_name",
            "type": "string",
            "description": "Full name of the organization that publishes the dataset. This may be the same as one of the `agency.agency_name` values.",
            "gtfs_required": "Required",
            "gtfs_type": "Text",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "feed_publisher_url",
            "type": "string",
            "format": "uri",
            "description": "URL of the dataset publishing organization's website. This may be the same as one of the `agency.agency_url` values.",
            "gtfs_required": "Required",
            "gtfs_type": "URL",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "feed_lang",
            "type": "string",
            "description": "Default language used for the text in this dataset. This setting helps GTFS consumers choose capitalization rules and other language-specific settings for the dataset. The file `translations.txt` can be used if the text needs to be translated into languages other than the default one.<br><br>The default language may be multilingual for datasets with the original text in multiple languages. In such cases, the `feed_lang` field should contain the language code `mul` defined by the norm ISO 639-2. The best practice here would be to provide, in `translations.txt`, a translation for each language used throughout the dataset. If all the original text in the dataset is in the same language, then `mul` should not be used.<hr>_Example: Consider a dataset from a multilingual country like Switzerland, with the original `stops.stop_name` field populated with stop names in different languages. Each stop name is written according to the dominant language in that stop’s geographic location, e.g. `Genève` for the French-speaking city of Geneva, `Zürich` for the German-speaking city of Zurich, and `Biel/Bienne` for the bilingual city of Biel/Bienne. The dataset `feed_lang` should be `mul` and translations would be provided in `translations.txt`, in German: `Genf`, `Zürich` and `Biel`; in French: `Genève`, `Zurich` and `Bienne`; in Italian: `Ginevra`, `Zurigo` and `Bienna`; and in English: `Geneva`, `Zurich` and `Biel/Bienne`._",
            "gtfs_required": "Required",
            "gtfs_type": "Language code",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "default_lang",
            "type": "string",
            "description": "Defines the language that should be used when the data consumer doesn’t know the language of the rider. It will often be `en` (English).",
            "gtfs_required": "Optional",
            "gtfs_type": "Language code"
          },
          {
            "name": "feed_start_date",
            "type": "date",
            "format": "%Y%m%d",
            "description": "The dataset provides complete and reliable schedule information for service in the period from the beginning of the `feed_start_date` day to the end of the `feed_end_date` day. Both days can be left empty if unavailable. The `feed_end_date` date must not precede the `feed_start_date` date if both are given. Dataset providers are encouraged to give schedule data outside this period to advise of likely future service, but dataset consumers should treat it mindful of its non-authoritative status. If `feed_start_date` or `feed_end_date` extend beyond the active calendar dates defined in [calendar.txt](#calendartxt) and [calendar_dates.txt](#calendar_datestxt), the dataset is making an explicit assertion that there is no service for dates within the `feed_start_date` or `feed_end_date` range but not included in the active calendar dates.",
            "gtfs_required": "Optional",
            "gtfs_type": "Date"
          },
          {
            "name": "feed_end_date",
            "type": "date",
            "format": "%Y%m%d",
            "description": "(see above)",
            "gtfs_required": "Optional",
            "gtfs_type": "Date"
          },
          {
            "name": "feed_version",
            "type": "string",
            "description": "String that indicates the current version of their GTFS dataset. GTFS-consuming applications can display this value to help dataset publishers determine whether the latest dataset has been incorporated.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          },
          {
            "name": "feed_contact_email",
            "type": "string",
            "format": "email",
            "description": "Email address for communication regarding the GTFS dataset and data publishing practices. `feed_contact_email` is a technical contact for GTFS-consuming applications. Provide customer service contact information through [agency.txt](#agencytxt).",
            "gtfs_required": "Optional",
            "gtfs_type": "Email"
          },
          {
            "name": "feed_contact_url",
            "type": "string",
            "format": "uri",
            "description": "URL for contact information, a web-form, support desk, or other tools for communication regarding the GTFS dataset and data publishing practices. `feed_contact_url` is a technical contact for GTFS-consuming applications. Provide customer service contact information through [agency.txt](#agencytxt).",
            "gtfs_required": "Optional",
            "gtfs_type": "URL"
          }
        ]
      }
    },
    {
      "name": "frequencies.txt",
      "path": "./frequencies.txt",
      "schema": {
        "fields": [
          {
            "name": "trip_id",
            "type": "",
            "description": "Identifies a trip to which the specified headway of service applies.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `trips.trip_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "start_time",
            "type": "time",
            "description": "Time at which the first vehicle departs from the first stop of the trip with the specified headway.",
            "gtfs_required": "Required",
            "gtfs_type": "Time",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "end_time",
            "type": "time",
            "description": "Time at which service changes to a different headway (or ceases) at the first stop in the trip.",
            "gtfs_required": "Required",
            "gtfs_type": "Time",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "headway_secs",
            "type": "",
            "description": "Time, in seconds, between departures from the same stop (headway) for the trip, during the time interval specified by `start_time` and `end_time`. Multiple headways for the same trip are allowed, but may not overlap. New headways may start at the exact time the previous headway ends.",
            "gtfs_required": "Required",
            "gtfs_type": "Positive integer",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "exact_times",
            "type": "integer",
            "description": "Indicates the type of service for a trip. See the file description for more information. Valid options are:<br><br>`0` or empty - Frequency-based trips.<br>`1` - Schedule-based trips with the exact same headway throughout the day. In this case the `end_time` value must be greater than the last desired trip `start_time` but less than the last desired trip start_time + `headway_secs`.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1
              ]
            }
          }
        ]
      }
    },
    {
      "name": "levels.txt",
      "path": "./levels.txt",
      "schema": {
        "fields": [
          {
            "name": "level_id",
            "type": "string",
            "description": "Id of the level that can be referenced from `stops.txt`.",
            "gtfs_required": "Required",
            "gtfs_type": "ID",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "level_index",
            "type": "number",
            "description": "Numeric index of the level that indicates relative position of this level in relation to other levels (levels with higher indices are assumed to be located above levels with lower indices).<br><br>Ground level should have index 0, with levels above ground indicated by positive indices and levels below ground by negative indices.",
            "gtfs_required": "Required",
            "gtfs_type": "Float",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "level_name",
            "type": "string",
            "description": "Optional name of the level (that matches level lettering/numbering used inside the building or the station). Is useful for elevator routing (e.g. “take the elevator to level “Mezzanine” or “Platforms” or “-1”).",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          }
        ],
        "primaryKey": "level_id"
      }
    },
    {
      "name": "pathways.txt",
      "path": "./pathways.txt",
      "schema": {
        "fields": [
          {
            "name": "pathway_id",
            "type": "string",
            "description": "The `pathway_id` field contains an ID that uniquely identifies the pathway. The `pathway_id` is used by systems as an internal identifier of this record (e.g., primary key in database), and therefore the `pathway_id` must be dataset unique. <br> Different pathways can go from the same `from_stop_id` to the same `to_stop_id`. For example, this happens when two escalators are side by side in opposite direction, or when a stair is nearby and elevator and both go from the same place to the same place.",
            "gtfs_required": "Required",
            "gtfs_type": "ID",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "from_stop_id",
            "type": "",
            "description": "Location at which the pathway begins. It contains a `stop_id` that identifies a platform, entrance/exit, generic node or boarding area from the `stops.txt` file.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `stops.stop_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "to_stop_id",
            "type": "",
            "description": "Location at which the pathway ends. It contains a `stop_id` that identifies a platform, entrance/exit, generic node or boarding area from the `stops.txt` file.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `stops.stop_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "pathway_mode",
            "type": "integer",
            "description": "Type of pathway between the specified (`from_stop_id`, `to_stop_id`) pair. Valid values for this field are: <br> • 1: walkway <br> • 2: stairs <br> • 3: moving sidewalk/travelator <br> • 4: escalator <br> • 5: elevator <br> • 6: fare gate (or payment gate): A pathway that crosses into an area of the station where a proof of payment is required (usually via a physical payment gate).<br>Fare gates may either separate paid areas of the station from unpaid ones, or separate different payment areas within the same station from each other. This information can be used to avoid routing passengers through stations using shortcuts that would require passengers to make unnecessary payments, like directing a passenger to walk through a subway platform to reach a busway. <br> • 7: exit gate: Indicates a pathway exiting an area where proof-of-payment is required into an area where proof-of-payment is no longer required.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
              ]
            }
          },
          {
            "name": "is_bidirectional",
            "type": "integer",
            "description": "Indicates in which direction the pathway can be used:<br>• 0: Unidirectional pathway, it can only be used from `from_stop_id` to `to_stop_id`.<br>• 1: Bidirectional pathway, it can be used in the two directions.<br><br>Fare gates (`pathway_mode=6`) and exit gates (`pathway_mode=7`) cannot be bidirectional.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "length",
            "type": "",
            "description": "Horizontal length in meters of the pathway from the origin location (defined in `from_stop_id`) to the destination location (defined in `to_stop_id`).<br><br>This field is recommended for walkways (`pathway_mode=1`), fare gates (`pathway_mode=6`) and exit gates (`pathway_mode=7`).",
            "gtfs_required": "Optional",
            "gtfs_type": "Non-negative Float"
          },
          {
            "name": "traversal_time",
            "type": "interger",
            "description": "Average time in seconds needed to walk through the pathway from the origin location (defined in `from_stop_id`) to the destination location (defined in `to_stop_id`).<br><br>This field is recommended for moving sidewalks (`pathway_mode=3`), escalators (`pathway_mode=4`) and elevator (`pathway_mode=5`).",
            "gtfs_required": "Optional",
            "gtfs_type": "Positive Integer",
            "constraints": {
              "minimum": 1.0
            }
          },
          {
            "name": "stair_count",
            "type": "interger",
            "description": "Number of stairs of the pathway.<br><br>Best Practices: one could use the approximation of 1 floor = 15 stairs to generate approximative values.<br><br>A positive `stair_count` implies that the rider walk up from `from_stop_id` to `to_stop_id`. And a negative `stair_count` implies that the rider walk down from `from_stop_id` to `to_stop_id`.<br><br>This field is recommended for stairs (`pathway_mode=2`).",
            "gtfs_required": "Optional",
            "gtfs_type": "Non-null Integer"
          },
          {
            "name": "max_slope",
            "type": "number",
            "description": "Maximum slope ratio of the pathway. Valid values for this field are:<br>• 0 or (empty): no slope.<br>• A float: slope ratio of the pathway, positive for upwards, negative for downwards.<br><br>This field should be used only with walkways (`pathway_mode=1`) and moving sidewalks (`pathway_mode=3`).<br><br>Example: In the US, 0.083 (also written 8.3%) is the maximum slope ratio for hand-propelled wheelchair, which mean an increase of 0.083m (so 8.3cm) for each 1m.",
            "gtfs_required": "Optional",
            "gtfs_type": "Float"
          },
          {
            "name": "min_width",
            "type": "number",
            "description": "Minimum width of the pathway in meters.<br><br>This field is highly recommended if the minimum width is less than 1 meter.",
            "gtfs_required": "Optional",
            "gtfs_type": "Positive Float",
            "constraints": {
              "minimum": 1.175494e-38
            }
          },
          {
            "name": "signposted_as",
            "type": "string",
            "description": "String of text from physical signage visible to transit riders. The string can be used to provide text directions to users, such as 'follow signs to '. The language text should appear in this field exactly how it is printed on the signs.<br><br>When the physical signage is multilingual, this field may be populated and translated following the example of `stops.stop_name` in the field definition of `feed_info.feed_lang`.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          },
          {
            "name": "reversed_signposted_as",
            "type": "string",
            "description": "Same than the `signposted_as` field, but when the pathways is used backward, i.e. from the `to_stop_id` to the `from_stop_id`.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          }
        ],
        "primaryKey": "pathway_id",
        "foreignKeys": [
          {
            "fields": [
              "from_stop_id"
            ],
            "reference": {
              "resource": "stops.txt",
              "fields": [
                "stop_id"
              ]
            }
          },
          {
            "fields": [
              "to_stop_id"
            ],
            "reference": {
              "resource": "stops.txt",
              "fields": "stop_id"
            }
          }
        ]
      }
    },
    {
      "name": "routes.txt",
      "path": "./routes.txt",
      "schema": {
        "fields": [
          {
            "name": "route_id",
            "type": "string",
            "description": "Identifies a route.",
            "gtfs_required": "Required",
            "gtfs_type": "ID",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "agency_id",
            "type": "",
            "description": "Agency for the specified route. This field is required when the dataset provides data for routes from more than one agency in [agency.txt](#agency), otherwise it is optional.",
            "gtfs_required": "Conditionally required",
            "gtfs_type": "ID referencing `agency.agency_id`"
          },
          {
            "name": "route_short_name",
            "type": "string",
            "description": "Short name of a route. This will often be a short, abstract identifier like \"32\", \"100X\", or \"Green\" that riders use to identify a route, but which doesn't give any indication of what places the route serves. Either `route_short_name` or `route_long_name` must be specified, or potentially both if appropriate.",
            "gtfs_required": "Conditionally required",
            "gtfs_type": "Text"
          },
          {
            "name": "route_long_name",
            "type": "string",
            "description": "Full name of a route. This name is generally more descriptive than the `route_short_name` and often includes the route's destination or stop. Either `route_short_name` or `route_long_name` must be specified, or potentially both if appropriate.",
            "gtfs_required": "Conditionally required",
            "gtfs_type": "Text"
          },
          {
            "name": "route_desc",
            "type": "string",
            "description": "Description of a route that provides useful, quality information. Do not simply duplicate the name of the route. <hr> _Example: \"A\" trains operate between Inwood-207 St, Manhattan and Far Rockaway-Mott Avenue, Queens at all times. Also from about 6AM until about midnight, additional \"A\" trains operate between Inwood-207 St and Lefferts Boulevard (trains typically alternate between Lefferts Blvd and Far Rockaway)._",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          },
          {
            "name": "route_type",
            "type": "integer",
            "description": "Indicates the type of transportation used on a route. Valid options are: <br><br>`0` - Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.<br>`1` - Subway, Metro. Any underground rail system within a metropolitan area.<br>`2` - Rail. Used for intercity or long-distance travel.<br>`3` - Bus. Used for short- and long-distance bus routes.<br>`4` - Ferry. Used for short- and long-distance boat service.<br>`5` - Cable tram. Used for street-level rail cars where the cable runs beneath the vehicle, e.g., cable car in San Francisco.<br>`6` - Aerial lift, suspended cable car (e.g., gondola lift, aerial tramway). Cable transport where cabins, cars, gondolas or open chairs are suspended by means of one or more cables.<br>`7` - Funicular. Any rail system designed for steep inclines.<br>`11` - Trolleybus. Electric buses that draw power from overhead wires using poles.<br>`12` - Monorail. Railway in which the track consists of a single rail or a beam.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                11,
                12
              ]
            }
          },
          {
            "name": "route_url",
            "type": "string",
            "format": "uri",
            "description": "URL of a web page about the particular route. Should be different from the `agency.agency_url` value.",
            "gtfs_required": "Optional",
            "gtfs_type": "URL"
          },
          {
            "name": "route_color",
            "type": "string",
            "description": "Route color designation that matches public facing material. Defaults to white (`FFFFFF`) when omitted or left empty. The color difference between `route_color` and `route_text_color` should provide sufficient contrast when viewed on a black and white screen.",
            "gtfs_required": "Optional",
            "gtfs_type": "Color"
          },
          {
            "name": "route_text_color",
            "type": "string",
            "description": "Legible color to use for text drawn against a background of `route_color`. Defaults to black (`000000`) when omitted or left empty. The color difference between `route_color` and `route_text_color` should provide sufficient contrast when viewed on a black and white screen.",
            "gtfs_required": "Optional",
            "gtfs_type": "Color"
          },
          {
            "name": "route_sort_order",
            "type": "interger",
            "description": "Orders the routes in a way which is ideal for presentation to customers. Routes with smaller `route_sort_order` values should be displayed first.",
            "gtfs_required": "Optional",
            "gtfs_type": "Non-negative integer",
            "constraints": {
              "minimum": 0.0
            }
          },
          {
            "name": "continuous_pickup",
            "type": "integer",
            "description": "Indicates that the rider can board the transit vehicle at any point along the vehicle’s travel path as described by `shapes.txt`, on every trip of the route. Valid options are: <br><br>`0` - Continuous stopping pickup. <br>`1` or empty - No continuous stopping pickup. <br>`2` - Must phone agency to arrange continuous stopping pickup. <br>`3` - Must coordinate with driver to arrange continuous stopping pickup.  <br><br>The continuous pickup behavior defined in `routes.txt` can be overridden in `stop_times.txt`.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "continuous_drop_off",
            "type": "integer",
            "description": "Indicates that the rider can alight from the transit vehicle at any point along the vehicle’s travel path as described by `shapes.txt`, on every trip of the route. Valid options are: <br><br>`0` - Continuous stopping drop off. <br>`1` or empty - No continuous stopping drop off. <br>`2` - Must phone agency to arrange continuous stopping drop off. <br>`3` - Must coordinate with driver to arrange continuous stopping drop off. <br><br>The continuous drop-off behavior defined in `routes.txt` can be overridden in `stop_times.txt`.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2,
                3
              ]
            }
          }
        ],
        "primaryKey": "route_id",
        "foreignKeys": [
          {
            "fields": [
              "agency_id"
            ],
            "reference": {
              "resource": "agency.txt",
              "fields": "agency_id"
            }
          }
        ]
      }
    },
    {
      "name": "shapes.txt",
      "path": "./shapes.txt",
      "schema": {
        "fields": [
          {
            "name": "shape_id",
            "type": "string",
            "description": "Identifies a shape.",
            "gtfs_required": "Required",
            "gtfs_type": "ID",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "shape_pt_lat",
            "type": "number",
            "description": "Latitude of a shape point. Each record in [shapes.txt](#shapestxt) represents a shape point used to define the shape.",
            "gtfs_required": "Required",
            "gtfs_type": "Latitude",
            "constraints": {
              "required": "true",
              "minimum": -180.0,
              "maximum": 180.0
            }
          },
          {
            "name": "shape_pt_lon",
            "type": "number",
            "description": "Longitude of a shape point.",
            "gtfs_required": "Required",
            "gtfs_type": "Longitude",
            "constraints": {
              "required": "true",
              "minimum": -180.0,
              "maximum": 180.0
            }
          },
          {
            "name": "shape_pt_sequence",
            "type": "interger",
            "description": "Sequence in which the shape points connect to form the shape. Values must increase along the trip but do not need to be consecutive.<hr>*Example: If the shape \"A_shp\" has three points in its definition, the [shapes.txt](#shapestxt) file might contain these records to define the shape:* <br> `shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence` <br> `A_shp,37.61956,-122.48161,0` <br> `A_shp,37.64430,-122.41070,6` <br> `A_shp,37.65863,-122.30839,11`",
            "gtfs_required": "Required",
            "gtfs_type": "Non-negative integer",
            "constraints": {
              "required": "true",
              "minimum": 0.0
            }
          },
          {
            "name": "shape_dist_traveled",
            "type": "number",
            "description": "Actual distance traveled along the shape from the first shape point to the point specified in this record. Used by trip planners to show the correct portion of the shape on a map. Values must increase along with `shape_pt_sequence`; they cannot be used to show reverse travel along a route. Distance units must be consistent with those used in [stop_times.txt](#stop_timestxt).<hr>*Example: If a bus travels along the three points defined above for A_shp, the additional `shape_dist_traveled` values (shown here in kilometers) would look like this:* <br> `shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence,shape_dist_traveled` <br> `A_shp,37.61956,-122.48161,0,0`<br>`A_shp,37.64430,-122.41070,6,6.8310` <br> `A_shp,37.65863,-122.30839,11,15.8765`",
            "gtfs_required": "Optional",
            "gtfs_type": "Non-negative float",
            "constraints": {
              "minimum": 0.0
            }
          }
        ],
        "primaryKey": "shape_id"
      }
    },
    {
      "name": "stops.txt",
      "path": "./stops.txt",
      "schema": {
        "fields": [
          {
            "name": "stop_id",
            "type": "string",
            "description": "Identifies a stop, station, or station entrance. <br><br> The term \"station entrance\" refers to both station entrances and station exits. Stops, stations or station entrances are collectively referred to as locations. Multiple routes may use the same stop.",
            "gtfs_required": "Required",
            "gtfs_type": "ID",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "stop_code",
            "type": "string",
            "description": "Short text or a number that identifies the location for riders. These codes are often used in phone-based transit information systems or printed on signage to make it easier for riders to get information for a particular location. The `stop_code` can be the same as `stop_id` if it is public facing. This field should be left empty for locations without a code presented to riders.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          },
          {
            "name": "stop_name",
            "type": "string",
            "description": "Name of the location. Use a name that people will understand in the local and tourist vernacular.<br><br>When the location is a boarding area (`location_type=4`), the `stop_name` should contains the name of the boarding area as displayed by the agency. It could be just one letter (like on some European intercity railway stations), or text like “Wheelchair boarding area” (NYC’s Subway) or “Head of short trains” (Paris’ RER).<br><br>Conditionally Required:<br>• **Required** for locations which are stops (`location_type=0`), stations (`location_type=1`) or entrances/exits (`location_type=2`).<br>• Optional for locations which are generic nodes (`location_type=3`) or boarding areas (`location_type=4`).",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "Text"
          },
          {
            "name": "tts_stop_name",
            "type": "string",
            "description": "Readable version of the `stop_name`. See \"Text-to-speech field\" in the [Term Definitions](#term-definitions) for more.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          },
          {
            "name": "stop_desc",
            "type": "string",
            "description": "Description of the location that provides useful, quality information. Do not simply duplicate the name of the location.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          },
          {
            "name": "stop_lat",
            "type": "number",
            "description": "Latitude of the location.<br><br>For stops/platforms (`location_type=0`) and boarding area (`location_type=4`), the coordinates must be the ones of the bus pole — if exists — and otherwise of where the travelers are boarding the vehicle (on the sidewalk or the platform, and not on the roadway or the track where the vehicle stops). <br><br>Conditionally Required:<br>• **Required** for locations which are stops (`location_type=0`), stations (`location_type=1`) or entrances/exits (`location_type=2`).<br>• Optional for locations which are generic nodes (`location_type=3`) or boarding areas (`location_type=4`).",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "Latitude",
            "constraints": {
              "minimum": -180.0,
              "maximum": 180.0
            }
          },
          {
            "name": "stop_lon",
            "type": "number",
            "description": "Longitude of the location.<br><br>For stops/platforms (`location_type=0`) and boarding area (`location_type=4`), the coordinates must be the ones of the bus pole — if exists — and otherwise of where the travelers are boarding the vehicle (on the sidewalk or the platform, and not on the roadway or the track where the vehicle stops). <br><br>Conditionally Required:<br>• **Required** for locations which are stops (`location_type=0`), stations (`location_type=1`) or entrances/exits (`location_type=2`).<br>• Optional for locations which are generic nodes (`location_type=3`) or boarding areas (`location_type=4`).",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "Longitude",
            "constraints": {
              "minimum": -180.0,
              "maximum": 180.0
            }
          },
          {
            "name": "zone_id",
            "type": "string",
            "description": "Identifies the fare zone for a stop. This field is required if providing fare information using [fare_rules.txt](#fare_rulestxt), otherwise it is optional. If this record represents a station or station entrance, the `zone_id` is ignored.",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "ID"
          },
          {
            "name": "stop_url",
            "type": "string",
            "format": "uri",
            "description": "URL of a web page about the location. This should be different from the `agency.agency_url` and the `routes.route_url` field values.",
            "gtfs_required": "Optional",
            "gtfs_type": "URL"
          },
          {
            "name": "location_type",
            "type": "integer",
            "description": "Type of the location:<br>• `0` (or blank): **Stop** (or **Platform**). A location where passengers board or disembark from a transit vehicle. Is called a platform when defined within a `parent_station`.<br>• `1`: **Station**. A physical structure or area that contains one or more platform.<br>• `2`: **Entrance/Exit**. A location where passengers can enter or exit a station from the street. If an entrance/exit belongs to multiple stations, it can be linked by pathways to both, but the data provider must pick one of them as parent.<br>• `3`: **Generic Node**. A location within a station, not matching any other `location_type`, which can be used to link together pathways define in pathways.txt.<br>• `4`: **Boarding Area**. A specific location on a platform, where passengers can board and/or alight vehicles.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2,
                3,
                4
              ]
            }
          },
          {
            "name": "parent_station",
            "type": "",
            "description": "Defines hierarchy between the different locations defined in `stops.txt`. It contains the ID of the parent location, as followed:<br>• **Stop/platform** (`location_type=0`): the `parent_station` field contains the ID of a station.<br>• **Station** (`location_type=1`): this field must be empty.<br>• **Entrance/exit** (`location_type=2`) or **generic node** (`location_type=3`): the `parent_station` field contains the ID of a station (`location_type=1`)<br>• **Boarding Area** (`location_type=4`): the `parent_station` field contains ID of a platform.<br><br>Conditionally Required:<br>• **Required** for locations which are entrances (`location_type=2`), generic nodes (`location_type=3`) or boarding areas (`location_type=4`).<br>• Optional for stops/platforms (`location_type=0`).<br>• Forbidden for stations (`location_type=1`).",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "ID referencing `stops.stop_id`"
          },
          {
            "name": "stop_timezone",
            "type": "string",
            "description": "Timezone of the location. If the location has a parent station, it inherits the parent station’s timezone instead of applying its own. Stations and parentless stops with empty `stop_timezone` inherit the timezone specified by `agency.agency_timezone`. If `stop_timezone` values are provided, the times in [stop_times.txt](#stop_timetxt) should be entered as the time since midnight in the timezone specified by `agency.agency_timezone`. This ensures that the time values in a trip always increase over the course of a trip, regardless of which timezones the trip crosses.",
            "gtfs_required": "Optional",
            "gtfs_type": "Timezone"
          },
          {
            "name": "wheelchair_boarding",
            "type": "integer",
            "description": "Indicates whether wheelchair boardings are possible from the location. Valid options are: <br><br>For parentless stops:<br>`0` or empty - No accessibility information for the stop.<br>`1` - Some vehicles at this stop can be boarded by a rider in a wheelchair.<br>`2` - Wheelchair boarding is not possible at this stop. <br><br>For child stops: <br>`0` or empty - Stop will inherit its `wheelchair_boarding` behavior from the parent station, if specified in the parent.<br>`1` - There exists some accessible path from outside the station to the specific stop/platform.<br>`2` - There exists no accessible path from outside the station to the specific stop/platform.<br><br> For station entrances/exits: <br>`0` or empty - Station entrance will inherit its `wheelchair_boarding` behavior from the parent station, if specified for the parent.<br>`1` - Station entrance is wheelchair accessible.<br>`2` - No accessible path from station entrance to stops/platforms.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2
              ]
            }
          },
          {
            "name": "level_id",
            "type": "",
            "description": "Level of the location. The same level can be used by multiple unlinked stations.",
            "gtfs_required": "Optional",
            "gtfs_type": "ID referencing `levels.level_id`"
          },
          {
            "name": "platform_code",
            "type": "string",
            "description": "Platform identifier for a platform stop (a stop belonging to a station). This should be just the platform identifier (eg. \"G\" or \"3\"). Words like “platform” or \"track\" (or the feed’s language-specific equivalent) should not be included. This allows feed consumers to more easily internationalize and localize the platform identifier into other languages.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          }
        ],
        "primaryKey": "stop_id",
        "foreignKeys": [
          {
            "fields": [
              "parent_station"
            ],
            "reference": {
              "resource": "stops.txt",
              "fields": [
                "stop_id"
              ]
            }
          },
          {
            "fields": [
              "level_id"
            ],
            "reference": {
              "resource": "levels.txt",
              "fields": "level_id"
            }
          }
        ]
      }
    },
    {
      "name": "stop_times.txt",
      "path": "./stop_times.txt",
      "schema": {
        "fields": [
          {
            "name": "trip_id",
            "type": "",
            "description": "Identifies a trip.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `trips.trip_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "arrival_time",
            "type": "time",
            "description": "Arrival time at a specific stop for a specific trip on a route. If there are not separate times for arrival and departure at a stop, enter the same value for `arrival_time` and `departure_time`. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins.<br/><br/>Scheduled stops where the vehicle strictly adheres to the specified arrival and departure times are timepoints. If this stop is not a timepoint, it is recommended to provide an estimated or interpolated time. If this is not available, arrival_time can be left empty. Further, indicate that interpolated times are provided with `timepoint`=`0`. If interpolated times are indicated with `timepoint`=`0`, then time points must be indicated with `timepoint`=`1`. Provide arrival times for all stops that are time points. An arrival time must be specified for the first and the last stop in a trip.",
            "gtfs_required": "Conditionally required",
            "gtfs_type": "Time"
          },
          {
            "name": "departure_time",
            "type": "time",
            "description": "Departure time from a specific stop for a specific trip on a route. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins. If there are not separate times for arrival and departure at a stop, enter the same value for `arrival_time` and `departure_time`. See the `arrival_time` description for more details about using timepoints correctly. <br><br> The `departure_time` field should specify time values whenever possible, including non-binding estimated or interpolated times between timepoints.",
            "gtfs_required": "Conditionally required",
            "gtfs_type": "Time"
          },
          {
            "name": "stop_id",
            "type": "",
            "description": "Identifies the serviced stop. All stops serviced during a trip must have a record in [stop_times.txt](#stop_timestxt). Referenced locations must be stops, not stations or station entrances. A stop may be serviced multiple times in the same trip, and multiple trips and routes may service the same stop.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `stops.stop_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "stop_sequence",
            "type": "interger",
            "description": "Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive.<hr>*Example: The first location on the trip could have a `stop_sequence`=`1`, the second location on the trip could have a `stop_sequence`=`23`, the third location could have a `stop_sequence`=`40`, and so on.*",
            "gtfs_required": "Required",
            "gtfs_type": "Non-negative integer",
            "constraints": {
              "required": "true",
              "minimum": 0.0
            }
          },
          {
            "name": "stop_headsign",
            "type": "string",
            "description": "Text that appears on signage identifying the trip's destination to riders. This field overrides the default `trips.trip_headsign` when the headsign changes between stops. If the headsign is displayed for an entire trip, use `trips.trip_headsign` instead. <br><br>  A `stop_headsign` value specified for one `stop_time` does not apply to subsequent `stop_time`s in the same trip. If you want to override the `trip_headsign` for multiple `stop_time`s in the same trip, the `stop_headsign` value must be repeated in each `stop_time` row.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          },
          {
            "name": "pickup_type",
            "type": "integer",
            "description": "Indicates pickup method. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "drop_off_type",
            "type": "integer",
            "description": "Indicates drop off method. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "continuous_pickup",
            "type": "integer",
            "description": "Indicates that the rider can board the transit vehicle at any point along the vehicle’s travel path as described by `shapes.txt`, from this `stop_time` to the next `stop_time` in the trip’s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping pickup. <br>`1` or empty - No continuous stopping pickup. <br>`2` - Must phone agency to arrange continuous stopping pickup. <br>`3` - Must coordinate with driver to arrange continuous stopping pickup.  <br><br>If this field is populated, it overrides any continuous pickup behavior defined in `routes.txt`. If this field is empty, the `stop_time` inherits any continuous pickup behavior defined in `routes.txt`.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "continuous_drop_off",
            "type": "integer",
            "description": "Indicates that the rider can alight from the transit vehicle at any point along the vehicle’s travel path as described by `shapes.txt`, from this `stop_time` to the next `stop_time` in the trip’s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping drop off. <br>`1` or empty - No continuous stopping drop off. <br>`2` - Must phone agency to arrange continuous stopping drop off. <br>`3` - Must coordinate with driver to arrange continuous stopping drop off. <br><br>If this field is populated, it overrides any continuous drop-off behavior defined in `routes.txt`. If this field is empty, the `stop_time` inherits any continuous drop-off behavior defined in `routes.txt`.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "shape_dist_traveled",
            "type": "number",
            "description": "Actual distance traveled along the associated shape, from the first stop to the stop specified in this record. This field specifies how much of the shape to draw between any two stops during a trip. Must be in the same units used in [shapes.txt](#shapestxt). Values used for `shape_dist_traveled` must increase along with `stop_sequence`; they cannot be used to show reverse travel along a route.<hr>*Example: If a bus travels a distance of 5.25 kilometers from the start of the shape to the stop,`shape_dist_traveled`=`5.25`.*",
            "gtfs_required": "Optional",
            "gtfs_type": "Non-negative float",
            "constraints": {
              "minimum": 0.0
            }
          },
          {
            "name": "timepoint",
            "type": "integer",
            "description": "Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate. Valid options are:<br><br>`0` - Times are considered approximate.<br>`1` or empty - Times are considered exact.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1
              ]
            }
          }
        ]
      }
    },
    {
      "name": "transfers.txt",
      "path": "./transfers.txt",
      "schema": {
        "fields": [
          {
            "name": "from_stop_id",
            "type": "",
            "description": "Identifies a stop or station where a connection between routes begins. If this field refers to a station, the transfer rule applies to all its child stops.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `stops.stop_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "to_stop_id",
            "type": "",
            "description": "Identifies a stop or station where a connection between routes ends. If this field refers to a station, the transfer rule applies to all child stops.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `stops.stop_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "transfer_type",
            "type": "integer",
            "description": "Indicates the type of connection for the specified (`from_stop_id`, `to_stop_id`) pair. Valid options are:<br><br> `0` or empty - Recommended transfer point between routes.<br>`1` - Timed transfer point between two routes. The departing vehicle is expected to wait for the arriving one and leave sufficient time for a rider to transfer between routes.<br>`2` - Transfer requires a minimum amount of time between arrival and departure to ensure a connection. The time required to transfer is specified by `min_transfer_time`.<br>`3` - Transfers are not possible between routes at the location.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true",
              "enum": [
                0,
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "min_transfer_time",
            "type": "interger",
            "description": "Amount of time, in seconds, that must be available to permit a transfer between routes at the specified stops. The `min_transfer_time` should be sufficient to permit a typical rider to move between the two stops, including buffer time to allow for schedule variance on each route.",
            "gtfs_required": "Optional",
            "gtfs_type": "Non-negative integer",
            "constraints": {
              "minimum": 0.0
            }
          }
        ]
      }
    },
    {
      "name": "translations.txt",
      "path": "./translations.txt",
      "schema": {
        "fields": [
          {
            "name": "table_name",
            "type": "integer",
            "description": "Defines the table that contains the field to be translated. Allowed values are: `agency`, `stops`, `routes`, `trips`, `stop_times`, `pathways`, `levels`, `feed_info` and `attributions` (do not include the `.txt` file extension). If a table with a new file name is added by another proposal in the future, the table name is the name of the filename without the `.txt` file extension.",
            "gtfs_required": "Required",
            "gtfs_type": "Enum",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "field_name",
            "type": "string",
            "description": "Name of the field to be translated. Fields with type `Text` can be translated, fields with type `URL`, `Email` and `Phone number` can also be “translated” to provide resources in the correct language. Fields with other types should not be translated.",
            "gtfs_required": "Required",
            "gtfs_type": "Text",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "language",
            "type": "string",
            "description": "Language of translation.<br><br>If the language is the same as in `feed_info.feed_lang`, the original value of the field will be assumed to be the default value to use in languages without specific translations (if `default_lang` doesn't specify otherwise).<br><br>Example: In Switzerland, a city in an officially bilingual canton is officially called “Biel/Bienne”, but would simply be called “Bienne” in French and “Biel” in German.",
            "gtfs_required": "Required",
            "gtfs_type": "Language code",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "translation",
            "type": "string",
            "description": "Translated value.",
            "gtfs_required": "Required",
            "gtfs_type": "Text or URL or Email or Phone number",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "record_id",
            "type": "string",
            "description": "Defines the record that corresponds to the field to be translated. The value in `record_id` should be a main ID of the table, as defined below:<br>• `agency_id` for `agency.txt`;<br>• `stop_id` for `stops.txt`;<br>• `route_id` for `routes.txt`;<br>• `trip_id` for `trips.txt`;<br>• `trip_id` for `stop_times.txt`;<br>• `pathway_id` for `pathways.txt`;<br>• `level_id` for `levels.txt`;<br>• `attribution_id` for `attribution.txt`.<br><br>No field should be translated in the other tables. However producers sometimes add extra fields that are outside the official specification and these unofficial fields may need to be translated. Below is the recommended way to use `record_id` for those tables:<br>• `service_id` for `calendar.txt`;<br>• `service_id` for `calendar_dates.txt`;<br>• `fare_id` for `fare_attributes.txt`;<br>• `fare_id` for `fare_rules.txt`;<br>• `shape_id` for `shapes.txt`;<br>• `trip_id` for `frequencies.txt`;<br>• `from_stop_id` for `transfers.txt`.<br><br>**Conditionally Required:**<br>- **forbidden** if `table_name` is `feed_info`;<br>- **forbidden** if `field_value` is defined;<br>- **required** if `field_value` is empty.",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "ID"
          },
          {
            "name": "record_sub_id",
            "type": "string",
            "description": "Helps the record that contains the field to be translated when the table doesn’t have a unique ID. Therefore, the value in `record_sub_id` is the secondary ID of the table, as defined by the table below:<br>• None for `agency.txt`;<br>• None for `stops.txt`;<br>• None for `routes.txt`;<br>• None for `trips.txt`;<br>• `stop_sequence` for `stop_times.txt`;<br>• None for `pathways.txt`;<br>• None for `levels.txt`;<br>• None for `attributions.txt`.<br><br>No field should be translated in the other tables. However producers sometimes add extra fields that are outside the official specification and these unofficial fields may need to be translated. Below is the recommended way to use `record_sub_id` for those tables:<br>• None for `calendar.txt`;<br>• `date` for `calendar_dates.txt`;<br>• None for `fare_attributes.txt`;<br>• `route_id` for `fare_rules.txt`;<br>• None for `shapes.txt`;<br>• `start_time` for `frequencies.txt`;<br>• `to_stop_id` for `transfers.txt`.<br><br>**Conditionally Required:**<br>- **forbidden** if `table_name` is `feed_info`;<br>- **forbidden** if `field_value` is defined;<br>- **required** if `table_name=stop_times` and `record_id` is defined.",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "ID"
          },
          {
            "name": "field_value",
            "type": "string",
            "description": "Instead of defining which record should be translated by using `record_id` and `record_sub_id`, this field can be used to define the value which should be translated. When used, the translation will be applied when the fields identified by `table_name` and `field_name` contains the exact same value defined in field_value.<br><br>The field must have **exactly** the value defined in `field_value`. If only a subset of the value matches `field_value`, the translation won’t be applied.<br><br>If two translation rules match the same record (one with `field_value`, and the other one with `record_id`), then the rule with `record_id` is the one which should be used.<br><br>**Conditionally Required:**<br>- **forbidden** if `table_name` is `feed_info`;<br>- **forbidden** if `record_id` is defined;<br>- **required** if `record_id` is empty.",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "Text or URL or Email or Phone number"
          }
        ]
      }
    },
    {
      "name": "trips.txt",
      "path": "./trips.txt",
      "schema": {
        "fields": [
          {
            "name": "route_id",
            "type": "",
            "description": "Identifies a route.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `routes.route_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "service_id",
            "type": "",
            "description": "Identifies a set of dates when service is available for one or more routes.",
            "gtfs_required": "Required",
            "gtfs_type": "ID referencing `calendar.service_id` or `calendar_dates.service_id`",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "trip_id",
            "type": "string",
            "description": "Identifies a trip.",
            "gtfs_required": "Required",
            "gtfs_type": "ID",
            "constraints": {
              "required": "true"
            }
          },
          {
            "name": "trip_headsign",
            "type": "string",
            "description": "Text that appears on signage identifying the trip's destination to riders. Use this field to distinguish between different patterns of service on the same route. If the headsign changes during a trip, `trip_headsign` can be overridden by specifying values for the `stop_times.stop_headsign`.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          },
          {
            "name": "trip_short_name",
            "type": "string",
            "description": "Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trips. If riders do not commonly rely on trip names, leave this field empty.  A `trip_short_name` value, if provided, should uniquely identify a trip within a service day; it should not be used for destination names or limited/express designations.",
            "gtfs_required": "Optional",
            "gtfs_type": "Text"
          },
          {
            "name": "direction_id",
            "type": "integer",
            "description": "Indicates the direction of travel for a trip. This field is not used in routing; it provides a way to separate trips by direction when publishing time tables. Valid options are: <br><br>`0` - Travel in one direction (e.g. outbound travel).<br>`1` - Travel in the opposite direction (e.g. inbound travel).<hr>*Example: The `trip_headsign` and `direction_id` fields could be used together to assign a name to travel in each direction for a set of trips. A [trips.txt](#tripstxt) file could contain these records for use in time tables:* <br> `trip_id,...,trip_headsign,direction_id` <br> `1234,...,Airport,0` <br> `1505,...,Downtown,1`",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "block_id",
            "type": "string",
            "description": "Identifies the block to which the trip belongs. A block consists of a single trip or many sequential trips made using the same vehicle, defined by shared service days and `block_id`. A `block_id` can have trips with different service days, making distinct blocks. See the [example below](#example-blocks-and-service-day)",
            "gtfs_required": "Optional",
            "gtfs_type": "ID"
          },
          {
            "name": "shape_id",
            "type": "",
            "description": "Identifies a geospatial shape describing the vehicle travel path for a trip. <br><br>Conditionally Required: <br>- **Required** if the trip has a continuous pickup or drop-off behavior defined either in `routes.txt` or in `stop_times.txt`. <br>- **Optional** otherwise.",
            "gtfs_required": "Conditionally Required",
            "gtfs_type": "ID referencing `shapes.shape_id`"
          },
          {
            "name": "wheelchair_accessible",
            "type": "integer",
            "description": "Indicates wheelchair accessibility. Valid options are:<br><br>`0` or empty - No accessibility information for the trip.<br>`1` - Vehicle being used on this particular trip can accommodate at least one rider in a wheelchair.<br>`2` - No riders in wheelchairs can be accommodated on this trip.",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2
              ]
            }
          },
          {
            "name": "bikes_allowed",
            "type": "integer",
            "description": "Indicates whether bikes are allowed. Valid options are:<br><br>`0` or empty - No bike information for the trip.<br>`1` - Vehicle being used on this particular trip can accommodate at least one bicycle.<br>`2`",
            "gtfs_required": "Optional",
            "gtfs_type": "Enum",
            "constraints": {
              "enum": [
                0,
                1,
                2
              ]
            }
          }
        ],
        "primaryKey": "trip_id",
        "foreignKeys": [
          {
            "fields": [
              "route_id"
            ],
            "reference": {
              "resource": "routes.txt",
              "fields": [
                "route_id"
              ]
            }
          },
          {
            "fields": [
              "service_id"
            ],
            "reference": {
              "resource": "calendar.txt",
              "fields": [
                "service_id"
              ]
            }
          },
          {
            "fields": [
              "service_id"
            ],
            "reference": {
              "resource": "calendar_dates.txt",
              "fields": [
                "service_id"
              ]
            }
          },
          {
            "fields": [
              "shape_id"
            ],
            "reference": {
              "resource": "shapes.text",
              "fields": "shape_id"
            }
          }
        ]
      }
    }
  ]
}